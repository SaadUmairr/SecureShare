generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  googleID        String  @id
  username        String
  avatar          String
  email           String  @unique
  isPassphraseSet Boolean @default(false)

  userKeyPair   UserKeyPair?
  files         File[]
  uploadRecords UploadRecord[]
  FileShare     FileShare[]
}

model UserKeyPair {
  googleID   String @id
  passphrase String
  publicKey  String
  privateKey String
  iv         String

  user User @relation(fields: [googleID], references: [googleID], onDelete: Cascade)
}

model File {
  id           String   @id @default(uuid())
  googleID     String
  fileName     String
  fileNameIV   String
  symmetricKey String
  fileIV       String
  fileSize     BigInt   @default(0) @db.BigInt
  expireAt     DateTime @default(dbgenerated("(now() + interval '72 hours')"))
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User        @relation(fields: [googleID], references: [googleID], onDelete: Cascade)
  shareFiles FileShare[]
}

model FileShare {
  id             String   @id @default(cuid())
  shareId        String   @unique
  sharedFileName String
  originalFileId String?
  originalFile   File?    @relation(fields: [originalFileId], references: [id])
  passphraseHash String
  fileSize       BigInt   @default(0) @db.BigInt
  iv             String
  maxDownloads   Int      @default(3)
  downloadCount  Int      @default(0)
  ipAddress      String?
  createdAt      DateTime @default(now())
  expireAt       DateTime @default(dbgenerated("(now() + interval '24 hours')")) // Optional expiry
  userId         String? // User who shared it (optional)
  user           User?    @relation(fields: [userId], references: [googleID])

  // @@unique([originalFileId, passphraseHash]) // Prevent duplicate share of files based on passphrase

  // @@unique([originalFileId]) // Prevent duplicate shares of the same file
  @@unique([originalFileId, userId]) // Prevent duplicate of file per user
}

model UploadRecord {
  id        Int      @id @default(autoincrement())
  userId    String
  fileSize  BigInt   @db.BigInt
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [googleID], onDelete: Cascade)
}
